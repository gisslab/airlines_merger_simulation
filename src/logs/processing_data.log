---------------------------------------------------------------------------------------------------------------------------------------------
      name:  <unnamed>
       log:  /Users/gisellelab/Work/airlines_merger_simulation/src/logs/processing_data.log
  log type:  text
 opened on:  24 Aug 2025, 18:04:14

. 
. // ---------------------- PARAMETERS -------------------------------------------
. global YEARS   "2005/2019"

. global QUARTERS "1 2 3 4"

. global TYPE     "Market"   // DB1B “Market”

. 
. 
. di as yellow "--------------------------------------------------------------------------------------------------"
--------------------------------------------------------------------------------------------------

. di as yellow "----------------------------------- Running preprocessing_data.do --------------------------------"
----------------------------------- Running preprocessing_data.do --------------------------------

. di as yellow "--------------------------------------------------------------------------------------------------"
--------------------------------------------------------------------------------------------------

. 
. // ---------------------- LOAD AUXILIARY TABLES --------------------------------
. di as yellow "------------------------------------ Loading auxiliary tables ------------------------------------"
------------------------------------ Loading auxiliary tables ------------------------------------

. 
. // * City market lookup
. import delimited using "${PROC_OTHER}city_market_lookup.csv", varnames(1) clear stringcols(_all)
(encoding automatically selected: ISO-8859-1)
(2 vars, 5,987 obs)

. tempfile cities

. save `cities'
file /var/folders/xb/mch0wfzd205d97392nxjwj240000gn/T//S_35258.000001 saved as .dta format

. 
. // * Vacations (city-level flags) (only in the U.S.)
. import delimited using "${PROC_OTHER}vacations.csv", varnames(1) clear stringcols(_all)
(encoding automatically selected: ISO-8859-1)
(2 vars, 243 obs)

. rename origin_cities description

. destring vacation_spot, replace force
vacation_spot: all characters numeric; replaced as byte

. tempfile vacations

. save `vacations'
file /var/folders/xb/mch0wfzd205d97392nxjwj240000gn/T//S_35258.000002 saved as .dta format

. 
. // * City lookup + vacations
. use `cities', clear

. merge 1:1 description using `vacations', nogenerate

    Result                      Number of obs
    -----------------------------------------
    Not matched                         5,816
        from master                     5,780  
        from using                         36  

    Matched                               207  
    -----------------------------------------

. keep code vacation_spot

. 
. // # make int vacation_spot if float
. replace vacation_spot = 0 if vacation_spot==.
(5,780 real changes made)

. // code to long for merger
. destring code, replace
code: all characters numeric; replaced as long
(36 missing values generated)

. // Remove duplicates to ensure unique merge key
. duplicates drop code, force

Duplicates in terms of code

(35 observations deleted)

. gen long destcitymarketid = code  // for origin merge
(1 missing value generated)

. drop code

. tempfile cities_vac

. save `cities_vac'
file /var/folders/xb/mch0wfzd205d97392nxjwj240000gn/T//S_35258.000003 saved as .dta format

. 
. // * Population by airport-year
. import delimited using "${PROC_OTHER}population.csv", varnames(1) clear
(encoding automatically selected: ISO-8859-1)
(4 vars, 27,480 obs)

. // expected cols: airport, msa, year, population
. keep airport year population

. rename airport airport_id

. tempfile pops

. save `pops'
file /var/folders/xb/mch0wfzd205d97392nxjwj240000gn/T//S_35258.000004 saved as .dta format

. 
. // * Slot-controlled airports
. import delimited using "${PROC_OTHER}slot_controlled.csv", varnames(1) clear
(encoding automatically selected: ISO-8859-2)
(2 vars, 6,430 obs)

. // expected cols: airport, slot_controlled
. // ensure lowercase column names
. foreach v of varlist * {
  2.     local newname = lower("`v'")
  3.     if "`v'" != "`newname'" {
  4.         rename `v' `newname'
  5.     }
  6. }

. rename airport airport_id

. tempfile slots

. save `slots'
file /var/folders/xb/mch0wfzd205d97392nxjwj240000gn/T//S_35258.000005 saved as .dta format

. 
. // * T_MASTER_CORD (airport metadata; filter to CONUS)
. 
. import delimited using "${PROC_OTHER}t_master_cord.csv", varnames(1) clear
(encoding automatically selected: ISO-8859-1)
(28 vars, 18,944 obs)

. 
. // ensure lowercase column names
. foreach v of varlist * {
  2.     local newname = lower("`v'")
  3.     if "`v'" != "`newname'" {
  4.         rename `v' `newname'
  5.     }
  6. }

. keep if airport_country_code_iso == "US" & !inlist(airport_state_code,"PR","VI","TT","HI","AK")
(13,182 observations deleted)

. 
. keep airport_id display_airport_name display_airport_city_name_full

. duplicates drop airport_id, force

Duplicates in terms of airport_id

(3,596 observations deleted)

. rename airport_id originairportid  // for origin merge

. rename display_airport_name orig_airport_name

. rename display_airport_city_name_full orig_city

. tempfile conus_origin

. save `conus_origin'
file /var/folders/xb/mch0wfzd205d97392nxjwj240000gn/T//S_35258.000006 saved as .dta format

. 
. // Create separate copy for destination merge
. rename originairportid destairportid

. rename orig_airport_name dest_airport_name

. rename orig_city dest_city

. tempfile conus_dest

. save `conus_dest'
file /var/folders/xb/mch0wfzd205d97392nxjwj240000gn/T//S_35258.000007 saved as .dta format

. 
. // * Lookup & Hub (wide) -> long(Code, carrier, hub)
. import delimited using "${PROC_OTHER}lookup_and_hub_r.csv", varnames(1) clear stringcols(_all)
(encoding automatically selected: ISO-8859-9)
(134 vars, 6,429 obs)

. 
. // ensure lowercase column names
. foreach v of varlist * {
  2.     local newname = lower("`v'")
  3.     if "`v'" != "`newname'" {
  4.         rename `v' `newname'
  5.     }
  6. }

. // expected cols: code, description, airport, then 100+ carrier columns (AA, DL, WN, NK, UA, …)
. drop description airport

. // Prefix all non-code columns with "hub_"
. unab allvars : *

. local rest : list allvars - code

. foreach v of local rest {
  2.     capture confirm variable `v'
  3.     if !_rc rename `v' hub_`v'
  4.     qui destring hub_`v', replace force
  5. }
--Break--
r(1);

end of do-file

--Break--
r(1);

. do /var/folders/xb/mch0wfzd205d97392nxjwj240000gn/T/StataRun1756076701203.do

. // **********************************************************************
. // * Project: Airline Demand Estimation & Merger Simulation
. // * File   : 02_demand_estimation.do
. // * Author : Giselle Labrador-Badia
. // * Date   : 8-18-2025
. // *
. // * PURPOSE
. // *   Replicate and improve demand estimation from
. // *    the reference paper using the product-market panel created earlier
. // *   (airline_data.csv).
. // *
. // * MODEL (from the paper)
. // *   Consumer i’s indirect utility from product j in market t:
. // *       u_ijt = α p_jt + x_jt β + ξ_t + ξ_jt + ζ_it + (1-ρ) ε_ijt
. // *   where:
. // *     - p_jt               : Average Fare (price)
. // *     - x_jt includes      : Share Nonstop; Average Distance (1,000’s of miles);
. // *                            Average Distance^2 (1,000’s); log(1 + Number of Fringe firms)
. // *     - log(S_t)           : included as in Table C2 (market-size/scale control)
. // *     - ξ_t                : Origin–Destination (OD) fixed effects
. // *     - ε_ijt ~ Type I EV; ζ_it distributed conjugate (for nesting)
. // *   Market shares s_jt follow BLP/Logit form; the paper also reports
. // *   a nested-logit estimation with a single nesting parameter ρ.
. // *
. // * Estimating equation for two-level nested logit (GEV) structure
. // * Let mean utility be δ_j = x_j'β - αp_j + ξ_j
. // * Under the two-level nested logit structure, the inversion/estimating equation is:
. // * ln(s_j) - ln(s_0) = x_j'β - αp_j + σ_2 ln(s_j|h) + σ_1 ln(s_h|g) + ξ_j
. // *
. // * VARIABLES USED (as in Table C2 and text)
. // *   Outcome (simple logit):  log(s_jt) - log(s_0t)
. // *   Regressors x_jt:        Average Fare; log(S_t); Share Nonstop;
. // *                           Avg Distance (k miles); Avg Distance^2 (k);
. // *                           log(1 + Num Fringe)
. // *   Fixed effects:          Origin–Destination (OD) FE
. // *
. // * INSTRUMENTS FOR DEMAND (from paper)
. // *   z^D_jt includes: average rival distance; average # of markets a rival serves;
. // *   number of rival carriers (the last is helpful to identify the nesting parameter).
. // *
. // * NESTING STRUCTURE (single-level nested logit)
. // *   One level of groups to capture correlation in ε across products:
. // *   Default in this do-file: nests are defined by *carrier* within OD–quarter.
. // *
. // * OUTPUTS
. // *   - LaTeX summary stats for all estimation variables
. // *   - OLS logit (informal)
. // *   - IV logit (price endogenous)
. // *   - IV nested-logit (price and ln(s_h) endogenous)
. // *
. // * REFERENCE (nested logit, incl. two-level):
. // * - Train, Kenneth E. (2009). Discrete Choice Methods with Simulation, 2nd ed.
. // * Cambridge University Press — Chapter 4 “Nested Logit”.
. // * - Helpful note for share derivatives/elasticities:
. // * Mansley, R., N. Miller, C. Ryan, and M. Weinberg (2019/2024),
. // * “Notes on the Nested Logit Demand Model.” (short technical memo)
. // ***********************************************************************
. 
. // *-------------------------*
. // * USER CHOICES & PATHS   *
. // *-------------------------*
. clear all

. 
. * Paths
. 
. // if in my laptop:
. cd "/Users/gisellelab/Work/airlines_merger_simulation"   // <-- adjust this, then run the do-file , My path is 
/Users/gisellelab/Work/airlines_merger_simulation

. 
. global PROC_DATA    "./data/processed/combined/"                // processed data

. global CODE_DIR      "./src/"                         

. global OUT      "./src/output/"              // output folder          // source code directory

. 
. cap log close
